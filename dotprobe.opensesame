# Generated by OpenSesame 2.9.6 (Hesitant Heisenberg)
# Fri Jun  5 14:39:17 2015 (posix)
# <http://www.cogsci.nl/opensesame>

set background "black"
set bidi "no"
set canvas_backend "xpyriment"
set compensation "0"
set coordinates "relative"
set description "A template containing a practice and an experimental phase"
set expyriment_opengl "no"
set font_bold "no"
set font_family "mono"
set font_italic "no"
set font_size "28"
set foreground "white"
set height "768"
set keyboard_backend "legacy"
set mouse_backend "xpyriment"
set sampler_backend "legacy"
set start "experiment"
set subject_nr "0"
set subject_parity "even"
set synth_backend "legacy"
set title "Extended template"
set width "1024"

define sketchpad ITI
	set duration "[iti]"
	set reset_variables "no"

define loop abm_loop
	set break_if "never"
	set column_order "abm"
	set cycles "1"
	set description "A loop containing one or more practice blocks"
	set item "block_sequence"
	set order "random"
	set repeat "1"
	setcycle 0 abm "1"
	run block_sequence

define loop block_loop
	set break_if "never"
	set column_order ""
	set cycles "0"
	set item "trial_sequence"
	set order "random"
	set repeat "1"
	run trial_sequence

define sequence block_sequence
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	set flush_keyboard "yes"
	run reset_feedback "always"
	run set_stimuli "always"
	run block_loop "always"
	run feedback "always"

define inline_script canvas
	___prepare__
	from openexp.canvas import canvas
	c = canvas(exp)
	font_size = 270
	font_size = 100
	c.set_font('mono', font_size)
	
	word = self.get('word')
	word_y = self.get('word_y')
	pair = self.get('pair')
	pair_y = self.get('pair_y')
	
	#print "word = %s" % word
	c.text(word,y=c.ycenter()+word_y)
	c.text(pair,y=c.ycenter()+pair_y)
	__end__
	___run__
	c.show()
	__end__

define inline_script config
	set _prepare ""
	___run__
	p          = self.get('subject_nr')
	schedule_f = 'schedule_' + str(p)
	session    = self.get('session')
	inf = open(schedule_f,'r')
	for line in inf.readlines():
		line = line.rstrip()
		schedule = line.split(' ')
	inf.close()
	
	phase = schedule[session]
	exp.set('phase',phase)
	print "participant %d, session %d, phase %s" % (p, session, phase)
	
	# set log filename
	import codecs
	exp._log.close()
	exp._log = codecs.open('data/p' + str(p) + 's' + str(session) + '.csv', 'w', encoding='utf-8')
	__end__

define loop dotprobe_loop
	set break_if "never"
	set column_order "abm"
	set cycles "1"
	set description "A loop containing one or more experimental blocks"
	set item "block_sequence"
	set order "random"
	set repeat "1"
	setcycle 0 abm "0"
	run block_sequence

define sketchpad end_of_abm
	set description "A sketchpad notifying the participant that the practice phase is finished"
	set duration "keypress"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 0 "Press any key to continue" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -64 -64 "FIXME: 20s rest" center=1 color="white" font_family="mono" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad end_of_dotprobe
	set description "A sketchpad notifying the participant that the experiment is finished"
	set duration "keypress"
	set reset_variables "no"
	set start_response_interval "no"
	draw textline 0 0 "Press any key to exit" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sequence experiment
	set description "The main sequence of the experiment"
	set flush_keyboard "yes"
	run setup "always"
	run get_session_number "always"
	run nword_block "always"
	run config "always"
	run instructions "always"
	run abm_loop "[phase] = 'B'"
	run end_of_abm "[phase]='B'"
	run dotprobe_loop "always"
	run end_of_dotprobe "always"

define feedback feedback
	set description "Provides feedback to the participant"
	set duration "keypress"
	set reset_variables "yes"
	draw textline 0 -96 "Your average response time was [avg_rt]ms" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 32 "Press any key to continue" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -32 "Your accuracy was [acc]%" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad fixation_cross
	set description "Displays stimuli"
	set duration "495"
	set reset_variables "no"
	set start_response_interval "no"
	draw line 0 -25 0 25 color="white" penwidth=6 z_index=0 show_if="always"
	draw line -25 0 25 0 color="white" penwidth=6 z_index=0 show_if="always"

define loop get_session_number
	set break_if "=isinstance(self.get('session'), int) and self.get('session') > 0 and self.get('session') < 36"
	set column_order ""
	set cycles "1000"
	set item "sequence"
	set order "sequential"
	set repeat "1"
	set skip "0"
	run sequence

define sampler incorrect_sound
	set duration "sound"
	set fade_in "0"
	set pan "0"
	set pitch "1"
	set sample "incorrect.ogg"
	set stop_after "0"
	set volume "1"

define sketchpad instructions
	set duration "keypress"
	set reset_variables "no"
	draw textline 32 0 "Press any key to start." center=1 color="white" font_family="mono" font_size=24 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -320 "Instructions" center=1 color="white" font_family="mono" font_size=28 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -480 -256 "During this task you will see pairs of words followed by a single dot, or a pair <br />of dots.  If you see a single dot, press the left mouse button.  If you see two<br />dots, press the right mouse button.<br />" center=0 color="white" font_family="mono" font_size=20 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline -480 -128 "Respond as quickly and accurately as possible." center=0 color="white" font_family="mono" font_size=20 font_bold="yes" font_italic="no" html="yes" z_index=0 show_if="always"

define logger logger
	set description "Logs experimental data"

define mouse_response mouse_response
	set allowed_responses "1;3"
	set correct_response "[correct]"
	set flush "yes"
	set show_cursor "no"
	set timeout "infinite"

define form_text_input nword_block
	set cols "1"
	set form_question "Enter N-word stimuli block number (0-9, 0 = practice stimuli)"
	set form_title "Choose stimulus block (test mode)"
	set form_var "block"
	set rows "1;1;6"
	widget 0 0 1 1 label text="[form_title]"
	widget 0 1 1 1 label center="no" text="[form_question]"
	widget 0 2 1 1 text_input focus="yes" stub="" return_accepts="yes" var="[form_var]"


define sketchpad probe
	set duration "0"
	set reset_variables "no"
	draw image "[probe_x]" "[probe_y]" "probe_[probe].png" scale=1 center=1 z_index=0 show_if="always"

define reset_feedback reset_feedback

define sequence sequence
	run session_number "always"

define form_text_input session_number
	set cols "1"
	set form_question "Enter the number (1-35) specified in the email you received for today's session:"
	set form_title "Session Number"
	set form_var "session"
	set rows "1;1;6"
	widget 0 0 1 1 label text="[form_title]"
	widget 0 1 1 1 label center="no" text="[form_question]"
	widget 0 2 1 1 text_input focus="yes" stub="" return_accepts="yes" var="[form_var]"


define inline_script set_iti
	___prepare__
	import random
	iti = random.randint(100,500)
	self.experiment.set("iti",iti)
	__end__
	set _run ""

define inline_script set_stimuli
	___prepare__
	top    = 192.5
	bottom = -192.5
	left   = 'left_button'
	right  = 'right_button'
	
	word_y  = (bottom, bottom, bottom, bottom, top, top, top, top)
	pair_y  = (top, top, top, top, bottom, bottom, bottom, bottom)
	probe_y = (bottom, top, bottom, top, bottom, top, bottom, top)
	probe   = (1,1,2,2,1,1,2,2)
	correct = (left, left, right, right, left, left, right, right)
	import random
	# return random character position (in pixels) for probe left/right from centre of word
	def probe_x(probe_word):
	  width  = 40            # FIXME: guess at width in px
	  length = len(probe_word)
	  if (length % 2 == 0):  # even
	    l = length
	  else:                  # odd
	    l = length - 1
	  char = random.randint(-l,l)
	  px   = char * width
	  if (length % 2 == 1):  # odd
	    px += width / 2
	  return px
	def setcycles(words, block = 0, start = 0):
	  global top, bottom, left, right, word_y, pair_y, probe_y, probe, correct, string
	  for pair_num in range(0,6):
	    for i in range(0,8):
	      cycle   = start + pair_num * 8 + i
	      word    = words[block][pair_num][0]
	      pair    = words[block][pair_num][1]
	      string += "setcycle %d word_y \"%s\"\n" % (cycle,word_y[i])
	      string += "setcycle %d word \"%s\"\n" % (cycle,word)
	      string += "setcycle %d pair \"%s\"\n" % (cycle,pair)
	      string += "setcycle %d probe \"%d\"\n" % (cycle,probe[i])
	      string += "setcycle %d pair_y \"%s\"\n" % (cycle,pair_y[i])
	      string += "setcycle %d probe_y \"%s\"\n" % (cycle,probe_y[i])
	      if word_y == probe_y:
		probe_word = word
	      else:
		probe_word = pair
	      string += "setcycle %d probe_x \"%s\"\n" % (cycle,probe_x(probe_word))
	      string += "setcycle %d correct \"%s\"\n" % (cycle,correct[i])
	  return
	
	# FIXME: read words from file
	# possibly better if it can easily be included in tarball
	nwords = {
		0:(['Despair','Parting'],['Wound','Attic'],['Battle','Choose'],['Chaos','Pupil'],['Burden','Accent'],['Defeated','Scissors']),
		1:(['Suspicious','Discussion'],['Disappointed','Concentrated'],['Worthless','Situation'],['Crime','Guest'],['Bad','Boy'],['Betrayed','Matching']),
		2:(['Excluded','Ordinary'],['Terrified','Apathetic'],['Damage','Memory'],['Loser','Faith'],['Loss','Bold'],['Agony','Abbey']),
		3:(['Punished','Follower'],['Brag','Tree'],['Weapon','Valley'],['Attack','Return'],['Conflict','Activity'],['Failure','Joining']),
		4:(['Abandon','Witness'],['Cowardly','Sympathy'],['Harm','Milk'],['Ashamed','Opinion'],['Nazi','Tell'],['Divorce','Teacher']),
		5:(['Illness','Herring'],['Distressed','Astonished'],['Threat','Source'],['Accused','Curious'],['Hurt','Book'],['Depressed','Abundance']),
		6:(['Frightened','Intonation'],['Lie','Vow'],['Useless','Whisper'],['Nightmare','Housewife'],['Angry','Build'],['Hell','Poet']),
		7:(['Stinking','Receiver'],['Destroy','Ceiling'],['Murder','Tricky'],['Stressed','Language'],['Prison','Member'],['Bomb','Lake']),
		8:(['Misfortune','Collective'],['Enemy','Organ'],['Lonley','Cellar'],['Afraid','Leader'],['Crisis','Forest'],['Evil','Rise']),
		9:(['Devil','Weave'],['Victim','Desert'],['Anxious','Release'],['Argument','Remember'],['Sad','Lip'],['Corpse','Salary'])
		}
	iwords = {
		0:(['Failure','Teacher'],['Money','Board'],['Happiness','Sentiment'],['Psychology','Suspicious'],['Contribution','Destruction'],['Life','Part'])
		}
	block  = self.get('block')
	string = ""
	setcycles(nwords, block)
	setcycles(iwords, 0, 48)
	string += "run trial_sequence\n"
	#print string
	
	bl = exp.items["block_loop"]
	bl.from_string(string)
	bl.cycles = 96
	bl.repeat = 1
	bl.order  = "random"
	
	from pprint import pprint
	#pprint(vars(bl))
	pprint(bl.item)
	#raise Exception('abort')
	__end__
	set _run ""

define inline_script setup
	set _prepare "exp.set('session',0)"
	set _run ""

define sketchpad sketchpad
	set duration "keypress"
	set reset_variables "no"

define sketchpad stimuli
	set duration "1245"
	set reset_variables "no"
	draw textline 0 "[word_y]" "[word]" center=1 color="white" font_family="mono" font_size=111 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 "[pair_y]" "[pair]" center=1 color="white" font_family="mono" font_size=111 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sequence trial_sequence
	set description "A single trial"
	set flush_keyboard "yes"
	run set_iti "always"
	run fixation_cross "always"
	run canvas "always"
	run stimuli "always"
	run probe "always"
	run mouse_response "always"
	run ITI "always"
	run logger "always"

