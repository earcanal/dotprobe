#!/usr/bin/perl
# vi: ft=perl

use strict;
use warnings;
use Text::CSV;
use Math::NumberCruncher;
use Data::Dumper;
use Pod::Usage;
use Getopt::Long;
use List::Util qw(sum);

my $debug = 1;

my($participant,$sessions);
GetOptions ("p=i" => \$participant,
	   "s=i" => \$sessions)
or die("Error in command line arguments\n");


pod2usage() unless $participant && $sessions && $ARGV[0] && $ARGV[1];
my($iwords_f,$session_path) = @ARGV;


my $csv = Text::CSV->new ( { binary => 1 } )  # should set binary attribute.
                 or die "Cannot use CSV: ".Text::CSV->error_diag ();

# iwords
open my $iwords, "<:encoding(utf8)", $iwords_f or die "$iwords_f $!";
my $row = $csv->getline($iwords); # ignore column headers
$row = $csv->getline($iwords);
my @ipairs = @$row;
shift @ipairs;
my @ipair = @ipairs[grep $_ % 2, 0..$#ipairs];       # odd-index  elements
my @iword = @ipairs[grep !($_ % 2), 0..$#ipairs];    # even-index elements
 
# dot-probe scores
my $iscores_f = "${session_path}/p${participant}_iscores";
my $nscores_f = "${session_path}/p${participant}_nscores";
open my $iscores, ">$iscores_f" or die "$iscores_f $!";
open my $nscores, ">$nscores_f" or die "$nscores_f $!";
my %session;
for (my $session = 1; $session <= $sessions; $session++) {
  my($phase,$n_score,$i_score) = score($participant,$session);
  $session{$session} = $phase;
  print $nscores "$phase\t$n_score\n" or die($!);
  print $iscores "$phase\t$i_score\n" or die($!);
}
close($nscores);
close($iscores);
close($iwords);

# GRS & PANAS scores
if ($ARGV[2]) {
  my $measures_f = $ARGV[2];
  open my $measures, "<:encoding(utf8)", $measures_f or die "$measures_f $!";
  my $row = $csv->getline($measures);
  $csv->column_names($row); ## CAVEAT: Export from Lime Survey with question code headings
  my $grs_scores_f   = "${session_path}/p${participant}_grs_scores";
  my $panas_scores_f = "${session_path}/p${participant}_panas_scores";
  my(%panas,%grs);
  while (my $row = $csv->getline_hr($measures)) {
    $debug && print STDERR 'p = ',$row->{participant},' lastpage = ',$row->{lastpage},"\n";
    if ($row->{participant} eq $participant && $row->{lastpage} eq 3) {
      # GRS total (7Q, 1-7, 5-7 reversed)
      for (5..7) { $row->{"grs[SQ00$_]"} = 7 - $row->{"grs[SQ00$_]"} + 1 } # reverse scores for items 5-7
      my @keys = sort(grep(/^panas/,keys(%$row)));
      #$debug && print STDERR join(',',@keys), "\n";
      my @scores = map {$row->{$_}} @keys;
      $panas{$row->{session}} = sum(@scores);
      # PANAS total (14Q, 1-5)
      @keys   = sort(grep(/^grs/,keys(%$row)));
      @scores = map {$row->{$_}} @keys;
      $grs{$row->{session}} = sum(@scores);
    }
  }
  close($measures);
  open my $grs_scores, ">$grs_scores_f" or die "$grs_scores_f $!";
  open my $panas_scores, ">$panas_scores_f" or die "$panas_scores_f $!";
  for my $session ( sort {$a <=> $b} keys %session) {
    $debug && print "Session $session ($session{$session}): grs = $grs{$session}, panas = $panas{$session}\n";
    print $grs_scores "$session{$session}\t$grs{$session}\n";
    print $panas_scores "$session{$session}\t$panas{$session}\n";
  }
  close($grs_scores);
  close($panas_scores);
}

sub score {
  my($p,$s)     = @_;
  my $session_f = "$session_path/p${p}s${s}.csv";
  my @rows      = ();
  open my $session, "<:encoding(utf8)", $session_f or die "$session_f $!";

  $row = $csv->getline($session);    # ignore datestamp row
  $row = $csv->getline($session);
  $csv->column_names($row);          # column headings
  while (my $row = $csv->getline_hr($session)) { push(@rows,$row) }
  close($session);
  pop(@rows);                        # ignore datestamp row

  my @rt;
  my $abm = 0;
  for (my $i = $#rows; $i >= 0; $i--) {
    my $row = $rows[$i];
    if (! $row->{correct}) { # incorrect response
      if ($debug) {
	print STDERR 'Rejecting incorrect trial ',$row->{count_ITI};
	print STDERR " (ABM)" if $row->{abm};
	print "\n";
      }
      $abm++ if $row->{abm};
      splice @rows,$i,1;     # reject
    } else {
      push(@rt,$row->{response_time});
    }
  }


  # include all trials (regardless of probe/word location) when working out values +/-3 SD and excluding values
  my $mean    = Math::NumberCruncher::Mean(\@rt);
  my $std_dev = Math::NumberCruncher::StandardDeviation(\@rt,1); # no decimal places
  $debug && print "mean: $mean, StdDev: $std_dev\n";
  my $upper = $mean + 3 * $std_dev;
  my $lower = $mean - 3 * $std_dev;
  $debug && print STDERR "lower = $lower, upper = $upper\n";

  @rt = ();
  $debug && print STDERR "rows = ",$#rows + 1,"\n";
  for (my $i = $#rows; $i >= 0; $i--) {
    $debug > 3 && print "i = $i\n";
    my $row = $rows[$i];
    if ($row->{abm}) {   # AB training trials
      $debug > 1 && print STDERR 'Rejecting AB trial ',$row->{count_ITI},"\n";
      splice @rows,$i,1; # discard
      next;
    }

    my $rt = $row->{response_time};
    if ($rt < $lower or $rt > $upper) {  # throw away any values -/+ 3 SDs
      $debug && print STDERR 'Rejecting fast/slow RT trial ',$row->{count_ITI}," (${rt}ms)\n";
      splice @rows,$i,1;
    } else {
      push(@rt,$rt);
    }
  }
  $debug && print STDERR "rows = ",$#rows + 1,"\n";

  $mean    = Math::NumberCruncher::Mean(\@rt);
  $std_dev = Math::NumberCruncher::StandardDeviation(\@rt,1); # no decimal places
  $debug && print "mean: $mean, StdDev: $std_dev\n";

  # score = [sum(NuPl + NlPu) - sum(NuPu + NlPl)]/2
  my($i_same,$i_diff,$n_same,$n_diff,$n_score,$i_score);
  for my $row (@rows) {
    if ($row->{word_y} ne $row->{probe_y} ) { # different word/probe location 
      if (grep(/^$row->{word}/,@iword)) {  # I word
	$debug > 1 && print 'I: ';
	$i_same += $row->{response_time};
      } else {                             # N word
	$debug > 1 && print 'N: ';
	$n_same += $row->{response_time};
      }
      $debug > 1 && print $row->{word},'-',$row->{pair},"\n";
    } else {                                  # same word/probe location 
      if (grep(/^$row->{word}/,@iword)) {  # I word
	$debug > 1 && print 'I: ';
	$i_diff += $row->{response_time};
      } else {                             # N word
	$debug > 1 && print 'N: ';
	$n_diff += $row->{response_time};
      }
      $debug > 1 && print $row->{word},'-',$row->{pair},"\n";
    }
  }
  $n_score = ($n_diff - $n_same) / 2;
  $i_score = ($i_diff - $i_same) / 2;

  my $phase = $abm ? 'B' : 'A';
  return($phase,$n_score,$i_score);
}
__END__

=head1 NAME

dotprobe2score - Convert dot-probe data files to scores consumable by SCRT

=head1 SYNOPSIS

dotprobe2score -p participant -s sessions path/to/iwords.csv path/to/data

=head1 DESCRIPTION

=cut
