#!/usr/bin/perl
# vi: ft=perl

use strict;
use warnings;
use Text::CSV;
use Math::NumberCruncher;
use Data::Dumper;
use Pod::Usage;
use Getopt::Long;
use List::Util qw(sum);

my $debug = 0;

my($participant,$sessions);
GetOptions ("p=i" => \$participant,
	    "s=i" => \$sessions,
	    "d=i" => \$debug)
or die("Error in command line arguments\n");

my $datadir = '/media/paul/2E95-1293/study/participants';
my $csv     = Text::CSV->new ( { binary => 1 } )  # should set binary attribute.
                 or die "Cannot use CSV: ".Text::CSV->error_diag ();

## get completed sessions for each participant
my %participants; # sessions / session_number => phase, ab_i, ab_n, grs, panas
my $schedules_f = "${datadir}/rumination study - schedules.csv";
open my $schedules, "<:encoding(utf8)", $schedules_f or die "$schedules_f $!";
my $row = $csv->getline($schedules);
$csv->column_names($row);
for (my $i = 1; $i <= 13; $i++ ) {
  my $row = $csv->getline_hr($schedules);
  $participants{$row->{Participant}}->{sessions} = $row->{Complete};
}

#pod2usage() unless $participant && $sessions && $ARGV[0] && $ARGV[1];
#my($iwords_f,$session_path) = @ARGV;

for my $participant (keys(%participants)) {
  print STDERR "Processing data for participant $participant\n";

  my $p_dir        = "${datadir}/${participant}";
  my $iwords_f     = "${p_dir}/iwords.csv";
  my $session_path = "${datadir}/${participant}/dotprobe";
  # iwords
  open my $iwords, "<:encoding(utf8)", $iwords_f or die "$iwords_f $!";
  my $row = $csv->getline($iwords); # ignore column headers
  $row = $csv->getline($iwords);
  my @ipairs = @$row;
  shift @ipairs;
  my @ipair = @ipairs[grep $_ % 2, 0..$#ipairs];       # odd-index  elements
  my @iword = @ipairs[grep !($_ % 2), 0..$#ipairs];    # even-index elements
   
  # dot-probe scores
  my $iscores_f = "${p_dir}/p${participant}_i_scores";
  my $nscores_f = "${p_dir}/p${participant}_n_scores";
  open my $iscores, ">$iscores_f" or die "$iscores_f $!";
  open my $nscores, ">$nscores_f" or die "$nscores_f $!";
  my %session;
  for (my $session = 1; $session <= $participants{$participant}->{sessions}; $session++) {
    my($phase,$n_score,$i_score) = score($session_path,\@iword,$participant,$session);
    $participants{$participant}->{$session}->{phase} = $phase;
    $participants{$participant}->{$session}->{ab_n} = $n_score;
    $participants{$participant}->{$session}->{ab_i} = $i_score;
    print $nscores "$phase\t$n_score\n" or die($!);
    print $iscores "$phase\t$i_score\n" or die($!);
  }
  close($nscores);
  close($iscores);
  close($iwords);

  # GRS & PANAS scores
  my $measures_f = "${datadir}/measures.csv";
  open my $measures, "<:encoding(utf8)", $measures_f or die "$measures_f $!";
  $row = $csv->getline($measures);
  $csv->column_names($row); ## CAVEAT: Export from Lime Survey with question code headings
  my $grs_scores_f   = "${p_dir}/p${participant}_grs_scores";
  my $panas_scores_f = "${p_dir}/p${participant}_panas_scores";
  my @sessions       = ();
  while (my $row = $csv->getline_hr($measures)) {
    $debug && print STDERR 'p = ',$row->{participant},' lastpage = ',$row->{lastpage},"\n";
    if ($row->{participant} eq $participant && $row->{lastpage} eq 3) {
      my $session = $row->{session};
      push(@sessions,$session);
      # GRS total (7Q, 1-7, 5-7 reversed)
      for (5..7) { $row->{"grs[SQ00$_]"} = 7 - $row->{"grs[SQ00$_]"} + 1 } # reverse scores for items 5-7
      my @keys = sort(grep(/^panas/,keys(%$row)));
      #$debug && print STDERR join(',',@keys), "\n";
      my @scores = map {$row->{$_}} @keys;
      $participants{$participant}->{$row->{session}}->{panas} = sum(@scores);
      # PANAS total (14Q, 1-5)
      @keys   = sort(grep(/^grs/,keys(%$row)));
      @scores = map {$row->{$_}} @keys;
      $participants{$participant}->{$row->{session}}->{grs} = sum(@scores);
    }
  }
  close($measures);
  open my $grs_scores, ">$grs_scores_f" or die "$grs_scores_f $!";
  open my $panas_scores, ">$panas_scores_f" or die "$panas_scores_f $!";
  for my $s ( sort {$a <=> $b} @sessions) {
    my($phase,$ab_i,$ab_n,$grs,$panas) = map { $participants{$participant}->{$s}->{$_} } qw/phase ab_i ab_n grs panas/;
    $debug && print "Session $s ($phase): grs = $grs, panas = $panas\n";
    print $grs_scores "$phase\t$grs\n";
    print $panas_scores "$phase\t$panas\n";
  }
  close($grs_scores);
  close($panas_scores);
}

# MBD
use List::MoreUtils qw/natatime/ ;
my @p    = sort {$a <=> $b} keys %participants;
my $iter = natatime 4, @p; # FIXIT: SCRT.graph complains with units > 5
my $i    = 0;
while (my @chunk = $iter->()) {
  my $mbd_grs_f = "${datadir}/mbd_grs_${i}";
  open my $mbd_grs, ">$mbd_grs_f" or die "$mbd_grs_f $!";
  for my $s (1..35) {
    for my $p (@chunk) {
      my $last  = $participants{$p}->{sessions};
      # replace missing data with last observation
      my $phase = $participants{$p}->{$s}->{phase} || $participants{$p}->{$last}->{phase};
      my $grs   = $participants{$p}->{$s}->{grs}   || $participants{$p}->{$last}->{grs};
      print $mbd_grs "$phase\t$grs";
      print $mbd_grs ($p ne $chunk[$#chunk]) ? "\t" : "\n";
    }
  }
  print $mbd_grs "\n";
  close($mbd_grs);
  $i++;
}

sub score {
  my($session_path,$iword,$p,$s) = @_;
  my $session_f = "$session_path/p${p}s${s}.csv";
  my @iword     = @$iword;
  my @rows      = ();
  open my $session, "<:encoding(utf8)", $session_f or die "$session_f $!";

  my $row = $csv->getline($session); # ignore datestamp row
  $row = $csv->getline($session);
  $csv->column_names($row);          # column headings
  while (my $row = $csv->getline_hr($session)) { push(@rows,$row) }
  close($session);
  pop(@rows);                        # ignore datestamp row

  my @rt;
  my $abm = 0;
  for (my $i = $#rows; $i >= 0; $i--) {
    my $row = $rows[$i];
    if (! $row->{correct}) { # incorrect response
      if ($debug) {
	print STDERR 'Rejecting incorrect trial ',$row->{count_ITI};
	print STDERR " (ABM)" if $row->{abm};
	print "\n";
      }
      $abm++ if $row->{abm};
      splice @rows,$i,1;     # reject
    } else {
      push(@rt,$row->{response_time});
    }
  }


  # include all trials (regardless of probe/word location) when working out values +/-3 SD and excluding values
  my $mean    = Math::NumberCruncher::Mean(\@rt);
  my $std_dev = Math::NumberCruncher::StandardDeviation(\@rt,1); # no decimal places
  $debug && print "mean: $mean, StdDev: $std_dev\n";
  my $upper = $mean + 3 * $std_dev;
  my $lower = $mean - 3 * $std_dev;
  $debug && print STDERR "lower = $lower, upper = $upper\n";

  @rt = ();
  $debug && print STDERR "rows = ",$#rows + 1,"\n";
  for (my $i = $#rows; $i >= 0; $i--) {
    $debug > 3 && print "i = $i\n";
    my $row = $rows[$i];
    if ($row->{abm}) {   # AB training trials
      $debug > 1 && print STDERR 'Rejecting AB trial ',$row->{count_ITI},"\n";
      splice @rows,$i,1; # discard
      next;
    }

    my $rt = $row->{response_time};
    if ($rt < $lower or $rt > $upper) {  # throw away any values -/+ 3 SDs
      $debug && print STDERR 'Rejecting fast/slow RT trial ',$row->{count_ITI}," (${rt}ms)\n";
      splice @rows,$i,1;
    } else {
      push(@rt,$rt);
    }
  }
  $debug && print STDERR "rows = ",$#rows + 1,"\n";

  $mean    = Math::NumberCruncher::Mean(\@rt);
  $std_dev = Math::NumberCruncher::StandardDeviation(\@rt,1); # no decimal places
  $debug && print "mean: $mean, StdDev: $std_dev\n";

  # score = [sum(NuPl + NlPu) - sum(NuPu + NlPl)]/2
  my($i_same,$i_diff,$n_same,$n_diff,$n_score,$i_score);
  for my $row (@rows) {
    if ($row->{word_y} ne $row->{probe_y} ) { # different word/probe location 
      if (grep(/^$row->{word}/,@iword)) {  # I word
	$debug > 1 && print 'I: ';
	$i_same += $row->{response_time};
      } else {                             # N word
	$debug > 1 && print 'N: ';
	$n_same += $row->{response_time};
      }
      $debug > 1 && print $row->{word},'-',$row->{pair},"\n";
    } else {                                  # same word/probe location 
      if (grep(/^$row->{word}/,@iword)) {  # I word
	$debug > 1 && print 'I: ';
	$i_diff += $row->{response_time};
      } else {                             # N word
	$debug > 1 && print 'N: ';
	$n_diff += $row->{response_time};
      }
      $debug > 1 && print $row->{word},'-',$row->{pair},"\n";
    }
  }
  $n_score = ($n_diff - $n_same) / 2;
  $i_score = ($i_diff - $i_same) / 2;

  my $phase = $abm ? 'B' : 'A';
  return($phase,$n_score,$i_score);
}
__END__

=head1 NAME

dotprobe2score - Convert dot-probe data files to scores consumable by SCRT

=head1 SYNOPSIS

dotprobe2score -p participant -s sessions path/to/iwords.csv path/to/data

=head1 DESCRIPTION

=cut
